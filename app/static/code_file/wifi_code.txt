#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiManager.h>
#include "DHTesp.h"
#include <ArduinoJson.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#include <Arduino.h>

DHTesp dht;
#define DHT11_PIN 6

double temperature;
double humidity;
double brightness;
double atmosphericPressure;

unsigned long measureDelay = 30000;  //    NOT LESS THAN 2000!!!!!    BETTER 600000  (10 MINUTES)
unsigned long lastTimeRan;

WiFiClient client;

//Your Domain name with URL path or IP address with path
const char* serverName = "http://10.7.31.96:8000/measurement-items/";   


double round2(double value) {
  return (int)(value * 100 + 0.5) / 100.0;
}


void setup() {

  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Wire.begin();

  // brightnessMeasure.begin();

  // if (!bmp.begin()) {
  //   Serial.println("Could not find a valid BMP085/BMP180 sensor, check wiring!");
  //   while (1) {}
  // }

  WiFi.mode(WIFI_STA);  // explicitly set mode, esp defaults to STA+AP
  // it is a good practice to make sure your code sets wifi mode how you want it.



  //WiFiManager, Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wm;

  // reset settings - wipe stored credentials for testing
  // these are stored by the esp library
  // wm.resetSettings();

  // Automatically connect using saved credentials,
  // if connection fails, it starts an access point with the specified name ( "AutoConnectAP"),
  // if empty will auto generate SSID, if password is blank it will be anonymous AP (wm.autoConnect())
  // then goes into a blocking loop awaiting configuration and will return success result

  bool res;
  // res = wm.autoConnect(); // auto generated AP name from chipid
  // res = wm.autoConnect("AutoConnectAP"); // anonymous ap
  res = wm.autoConnect("AutoConnectAP", "password");  // password protected ap

  if (!res) {
    Serial.println("Failed to connect");
    ESP.restart();
  } else {
    //if you get here you have connected to the WiFi
    Serial.println("Connected...yeey :)");
  }

  dht.setup(DHT11_PIN, DHTesp::DHT11);  // Connect DHT sensor to GPIO 14
}

void loop() {
  // put your main code here, to run repeatedly:
  HTTPClient http;

  http.begin(client, serverName);

  // measurements every measureDelay ms
  if (millis() > lastTimeRan + measureDelay) {
    humidity = dht.getHumidity();
    temperature = dht.getTemperature();
    brightness = 2.5;
    atmosphericPressure = 100.0;

    lastTimeRan = millis();

    http.addHeader("Content-Type", "application/json");

    DynamicJsonDocument jsonToSend(1024);
    jsonToSend["temperature"] = round2(temperature);
    jsonToSend["humidity"] = round2(humidity);
    jsonToSend["brightness"] = round2(brightness);
    jsonToSend["atmosphericPressure"] = round2(atmosphericPressure);

    String jsonToSendStr;
    serializeJson(jsonToSend, jsonToSendStr);

    int httpResponseCode = http.POST(jsonToSendStr);

    Serial.println("\nHTTP response code: " + String(httpResponseCode));
    Serial.println(temperature);
    Serial.println(humidity);
    Serial.println(jsonToSendStr);


    /* 
    Serial.println("++++++++++++++++++++++++++++++++++++++++++++");
    Serial.println(temperature);
    Serial.println(humidity);
    Serial.println(brightness);
    Serial.println(atmosphericPressure);
    Serial.println(jsonToSendStr);
    Serial.println("--------------------------------------------");
 */

    http.end();
  }
}
